# gif_to_rgb565.py
from PIL import Image, ImageSequence
import sys

def rgb888_to_565(r,g,b):
    return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3)

if len(sys.argv) < 4:
    print("Usage: python gif_to_rgb565.py <gif_path> <width> <height>")
    sys.exit(1)

path, W, H = sys.argv[1], int(sys.argv[2]), int(sys.argv[3])
im = Image.open(path)

frames = []
delays = []

for f in ImageSequence.Iterator(im):
    rgb = f.convert("RGB").resize((W, H))
    delays.append(int(f.info.get("duration", 100)))  # ms per frame
    pixels = list(rgb.getdata())
    frames.append([rgb888_to_565(*p) for p in pixels])

# Flatten all pixels and track offsets so we can address each frame
offsets = [0]
flat = []
for fr in frames:
    flat.extend(fr)
    offsets.append(len(flat))

with open("gif.h", "w") as out:
    out.write("// Auto-generated by gif_to_rgb565.py\n")
    out.write("#pragma once\n#include <stdint.h>\n\n")
    out.write(f"#define GIF_W {W}\n#define GIF_H {H}\n#define GIF_FRAMES {len(frames)}\n\n")
    out.write(f"static const uint32_t gif_offsets[GIF_FRAMES+1] = {{")
    out.write(",".join(map(str, offsets)))
    out.write("};\n")
    out.write(f"static const uint16_t gif_delays[GIF_FRAMES] = {{")
    out.write(",".join(map(str, delays)))
    out.write("};\n")
    out.write(f"static const uint16_t gif_pixels[{len(flat)}] = {{\n")
    line = 0
    for v in flat:
        out.write(f"0x{v:04X},")
        line += 1
        if line % 16 == 0: out.write("\n")
    out.write("\n};\n")
print("Wrote gif.h")
